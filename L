#include <WiFi.h>
#include <WebServer.h>
#include <SPIFFS.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 28800, 60000); // GMT+8 for PH
WebServer server(80);

float temperature = 0.0;
String condition = "";
unsigned long lastWeatherUpdate = 0;
const unsigned long weatherInterval = 60000; // 1 min

const char* logoPath = "/logo.xbm";

void fetchWeather() {
  if (millis() - lastWeatherUpdate < weatherInterval) return;
  lastWeatherUpdate = millis();

  HTTPClient http;
  http.begin("https://api.open-meteo.com/v1/forecast?latitude=14.3202&longitude=120.8740&current_weather=true");
  int httpCode = http.GET();

  if (httpCode == 200) {
    String payload = http.getString();
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, payload);
    temperature = doc["current_weather"]["temperature"];
    condition = String((int)doc["current_weather"]["weathercode"]);
  }
  http.end();
}

void drawLogo() {
  File file = SPIFFS.open(logoPath);
  if (!file) return;

  int w = 128, h = 32;
  uint8_t logo[w * h / 8];
  file.read(logo, sizeof(logo));
  display.drawBitmap(0, 20, logo, w, h, WHITE);
  file.close();
}

void drawScreen() {
  display.clearDisplay();

  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.print(timeClient.getFormattedTime());
  display.setCursor(70, 0);
  display.printf("%.1f C", temperature);

  drawLogo();

  display.display();
}

void handleUpload() {
  HTTPUpload& upload = server.upload();
  if (upload.status == UPLOAD_FILE_START) {
    SPIFFS.remove(logoPath);
    File file = SPIFFS.open(logoPath, FILE_WRITE);
    file.close();
  } else if (upload.status == UPLOAD_FILE_WRITE) {
    File file = SPIFFS.open(logoPath, FILE_APPEND);
    file.write(upload.buf, upload.currentSize);
    file.close();
  } else if (upload.status == UPLOAD_FILE_END) {
    server.send(200, "text/plain", "Logo uploaded. Rebooting...");
    delay(1000);
    ESP.restart();
  }
}

void handleRoot() {
  String html = "<form method='POST' action='/upload' enctype='multipart/form-data'>"
                "<input type='file' name='upload'><input type='submit' value='Upload Logo'></form>";
  server.send(200, "text/html", html);
}

void setupServer() {
  server.on("/", HTTP_GET, handleRoot);
  server.on("/upload", HTTP_POST, []() {
    server.send(200);
  }, handleUpload);
  server.begin();
}

void setup() {
  Serial.begin(115200);
  WiFi.softAP("ESP32-WeatherClock");

  if (!SPIFFS.begin(true)) {
    Serial.println("SPIFFS Mount Failed");
    return;
  }

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.clearDisplay();
  timeClient.begin();

  setupServer();
}

void loop() {
  server.handleClient();
  timeClient.update();
  fetchWeather();
  drawScreen();
  delay(10000);
}
